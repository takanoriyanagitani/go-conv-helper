// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl.proto

#include "sl.pb.h"
#include "sl.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace str2len {
namespace v1 {

static const char* StringLengthService_method_names[] = {
  "/str2len.v1.StringLengthService/StringLength",
};

std::unique_ptr< StringLengthService::Stub> StringLengthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StringLengthService::Stub> stub(new StringLengthService::Stub(channel, options));
  return stub;
}

StringLengthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StringLength_(StringLengthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StringLengthService::Stub::StringLength(::grpc::ClientContext* context, const ::str2len::v1::StringLengthRequest& request, ::str2len::v1::StringLengthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::str2len::v1::StringLengthRequest, ::str2len::v1::StringLengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StringLength_, context, request, response);
}

void StringLengthService::Stub::async::StringLength(::grpc::ClientContext* context, const ::str2len::v1::StringLengthRequest* request, ::str2len::v1::StringLengthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::str2len::v1::StringLengthRequest, ::str2len::v1::StringLengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StringLength_, context, request, response, std::move(f));
}

void StringLengthService::Stub::async::StringLength(::grpc::ClientContext* context, const ::str2len::v1::StringLengthRequest* request, ::str2len::v1::StringLengthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StringLength_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::str2len::v1::StringLengthResponse>* StringLengthService::Stub::PrepareAsyncStringLengthRaw(::grpc::ClientContext* context, const ::str2len::v1::StringLengthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::str2len::v1::StringLengthResponse, ::str2len::v1::StringLengthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StringLength_, context, request);
}

::grpc::ClientAsyncResponseReader< ::str2len::v1::StringLengthResponse>* StringLengthService::Stub::AsyncStringLengthRaw(::grpc::ClientContext* context, const ::str2len::v1::StringLengthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStringLengthRaw(context, request, cq);
  result->StartCall();
  return result;
}

StringLengthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StringLengthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StringLengthService::Service, ::str2len::v1::StringLengthRequest, ::str2len::v1::StringLengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StringLengthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::str2len::v1::StringLengthRequest* req,
             ::str2len::v1::StringLengthResponse* resp) {
               return service->StringLength(ctx, req, resp);
             }, this)));
}

StringLengthService::Service::~Service() {
}

::grpc::Status StringLengthService::Service::StringLength(::grpc::ServerContext* context, const ::str2len::v1::StringLengthRequest* request, ::str2len::v1::StringLengthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* GetCmdService_method_names[] = {
  "/str2len.v1.GetCmdService/GetCmd",
};

std::unique_ptr< GetCmdService::Stub> GetCmdService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GetCmdService::Stub> stub(new GetCmdService::Stub(channel, options));
  return stub;
}

GetCmdService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCmd_(GetCmdService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GetCmdService::Stub::GetCmd(::grpc::ClientContext* context, const ::str2len::v1::Proxy_GetCmdRequest& request, ::str2len::v1::Proxy_GetCmdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::str2len::v1::Proxy_GetCmdRequest, ::str2len::v1::Proxy_GetCmdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCmd_, context, request, response);
}

void GetCmdService::Stub::async::GetCmd(::grpc::ClientContext* context, const ::str2len::v1::Proxy_GetCmdRequest* request, ::str2len::v1::Proxy_GetCmdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::str2len::v1::Proxy_GetCmdRequest, ::str2len::v1::Proxy_GetCmdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCmd_, context, request, response, std::move(f));
}

void GetCmdService::Stub::async::GetCmd(::grpc::ClientContext* context, const ::str2len::v1::Proxy_GetCmdRequest* request, ::str2len::v1::Proxy_GetCmdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCmd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::str2len::v1::Proxy_GetCmdResponse>* GetCmdService::Stub::PrepareAsyncGetCmdRaw(::grpc::ClientContext* context, const ::str2len::v1::Proxy_GetCmdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::str2len::v1::Proxy_GetCmdResponse, ::str2len::v1::Proxy_GetCmdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCmd_, context, request);
}

::grpc::ClientAsyncResponseReader< ::str2len::v1::Proxy_GetCmdResponse>* GetCmdService::Stub::AsyncGetCmdRaw(::grpc::ClientContext* context, const ::str2len::v1::Proxy_GetCmdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCmdRaw(context, request, cq);
  result->StartCall();
  return result;
}

GetCmdService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GetCmdService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GetCmdService::Service, ::str2len::v1::Proxy_GetCmdRequest, ::str2len::v1::Proxy_GetCmdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GetCmdService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::str2len::v1::Proxy_GetCmdRequest* req,
             ::str2len::v1::Proxy_GetCmdResponse* resp) {
               return service->GetCmd(ctx, req, resp);
             }, this)));
}

GetCmdService::Service::~Service() {
}

::grpc::Status GetCmdService::Service::GetCmd(::grpc::ServerContext* context, const ::str2len::v1::Proxy_GetCmdRequest* request, ::str2len::v1::Proxy_GetCmdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SendEventService_method_names[] = {
  "/str2len.v1.SendEventService/SendEvent",
};

std::unique_ptr< SendEventService::Stub> SendEventService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SendEventService::Stub> stub(new SendEventService::Stub(channel, options));
  return stub;
}

SendEventService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendEvent_(SendEventService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SendEventService::Stub::SendEvent(::grpc::ClientContext* context, const ::str2len::v1::Proxy_SendEventRequest& request, ::str2len::v1::Proxy_SendEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::str2len::v1::Proxy_SendEventRequest, ::str2len::v1::Proxy_SendEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendEvent_, context, request, response);
}

void SendEventService::Stub::async::SendEvent(::grpc::ClientContext* context, const ::str2len::v1::Proxy_SendEventRequest* request, ::str2len::v1::Proxy_SendEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::str2len::v1::Proxy_SendEventRequest, ::str2len::v1::Proxy_SendEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendEvent_, context, request, response, std::move(f));
}

void SendEventService::Stub::async::SendEvent(::grpc::ClientContext* context, const ::str2len::v1::Proxy_SendEventRequest* request, ::str2len::v1::Proxy_SendEventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::str2len::v1::Proxy_SendEventResponse>* SendEventService::Stub::PrepareAsyncSendEventRaw(::grpc::ClientContext* context, const ::str2len::v1::Proxy_SendEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::str2len::v1::Proxy_SendEventResponse, ::str2len::v1::Proxy_SendEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::str2len::v1::Proxy_SendEventResponse>* SendEventService::Stub::AsyncSendEventRaw(::grpc::ClientContext* context, const ::str2len::v1::Proxy_SendEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

SendEventService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SendEventService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SendEventService::Service, ::str2len::v1::Proxy_SendEventRequest, ::str2len::v1::Proxy_SendEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SendEventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::str2len::v1::Proxy_SendEventRequest* req,
             ::str2len::v1::Proxy_SendEventResponse* resp) {
               return service->SendEvent(ctx, req, resp);
             }, this)));
}

SendEventService::Service::~Service() {
}

::grpc::Status SendEventService::Service::SendEvent(::grpc::ServerContext* context, const ::str2len::v1::Proxy_SendEventRequest* request, ::str2len::v1::Proxy_SendEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace str2len
}  // namespace v1

