// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/bytes2bz/v1/b2b.proto

package bytes2bz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompressService_Compress_FullMethodName = "/bytes2bz.v1.CompressService/Compress"
)

// CompressServiceClient is the client API for CompressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompressServiceClient interface {
	Compress(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressResponse, error)
}

type compressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompressServiceClient(cc grpc.ClientConnInterface) CompressServiceClient {
	return &compressServiceClient{cc}
}

func (c *compressServiceClient) Compress(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressResponse, error) {
	out := new(CompressResponse)
	err := c.cc.Invoke(ctx, CompressService_Compress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompressServiceServer is the server API for CompressService service.
// All implementations must embed UnimplementedCompressServiceServer
// for forward compatibility
type CompressServiceServer interface {
	Compress(context.Context, *CompressRequest) (*CompressResponse, error)
	mustEmbedUnimplementedCompressServiceServer()
}

// UnimplementedCompressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompressServiceServer struct {
}

func (UnimplementedCompressServiceServer) Compress(context.Context, *CompressRequest) (*CompressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compress not implemented")
}
func (UnimplementedCompressServiceServer) mustEmbedUnimplementedCompressServiceServer() {}

// UnsafeCompressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompressServiceServer will
// result in compilation errors.
type UnsafeCompressServiceServer interface {
	mustEmbedUnimplementedCompressServiceServer()
}

func RegisterCompressServiceServer(s grpc.ServiceRegistrar, srv CompressServiceServer) {
	s.RegisterService(&CompressService_ServiceDesc, srv)
}

func _CompressService_Compress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressServiceServer).Compress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompressService_Compress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressServiceServer).Compress(ctx, req.(*CompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompressService_ServiceDesc is the grpc.ServiceDesc for CompressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytes2bz.v1.CompressService",
	HandlerType: (*CompressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compress",
			Handler:    _CompressService_Compress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bytes2bz/v1/b2b.proto",
}
